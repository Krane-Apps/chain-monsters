/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { Config } from "../../../dojo.config.ts";
import { Account, InvocationsDetails, shortString } from "starknet";
import { Packer } from "../game/types/packer.ts";

export interface Signer {
  account: Account;
}

export interface Initialize extends Signer {
  world: string;
}

export interface Spawn extends Signer {
  name: string;
}

export interface Create extends Signer {
  roles: number[];
  clans: number[];
}

export interface Join extends Signer {
  game_id: number;
}

export interface Ready extends Signer {
  game_id: number;
  status: boolean;
}

export interface Transfer extends Signer {
  game_id: number;
  team_index: number;
}

export interface Leave extends Signer {
  game_id: number;
}

export interface Kick extends Signer {
  game_id: number;
  team_index: number;
}

export interface Remove extends Signer {
  game_id: number;
}

export interface Start extends Signer {
  game_id: number;
}

export interface Move extends Signer {
  game_id: number;
  team_id: number;
  monster_id: number;
  x: number;
  y: number;
  special: boolean;
}

export interface Surrender extends Signer {}

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export const getContractByName = (manifest: any, name: string) => {
  const contract = manifest.contracts.find((contract: any) =>
    contract.name.includes("::" + name),
  );
  if (contract) {
    return contract.address;
  } else {
    return "";
  }
};

export async function setupWorld(provider: DojoProvider, config: Config) {
  function actions() {
    const contract_name = "actions";
    const contract = config.manifest.contracts.find((c: any) =>
      c.name.includes(contract_name),
    );
    if (!contract) {
      throw new Error(`Contract ${contract_name} not found in manifest`);
    }

    const spawn = async ({ account, name }: Spawn) => {
      try {
        const encoded_name = shortString.encodeShortString(name);
        return await provider.execute(account, {
          contractName: contract_name,
          entrypoint: "spawn",
          calldata: [provider.getWorldAddress(), encoded_name],
        });
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    const create = async ({ account, roles, clans }: Create) => {
      try {
        return await provider.execute(account, {
          contractName: contract_name,
          entrypoint: "create",
          calldata: [
            provider.getWorldAddress(),
            Packer.pack(roles, 4n),
            Packer.pack(clans, 4n),
          ],
        });
      } catch (error) {
        console.error("Error executing create:", error);
        throw error;
      }
    };

    // const join = async ({ account, game_id }: Join) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "join",
    //       [provider.getWorldAddress(), game_id],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing join:", error);
    //     throw error;
    //   }
    // };

    // const ready = async ({ account, game_id, status }: Ready) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "ready",
    //       [provider.getWorldAddress(), game_id, status ? 1 : 0],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing ready:", error);
    //     throw error;
    //   }
    // };

    // const transfer = async ({ account, game_id, team_index }: Transfer) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "transfer",
    //       [provider.getWorldAddress(), game_id, team_index],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing transfer:", error);
    //     throw error;
    //   }
    // };

    // const leave = async ({ account, game_id }: Leave) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "leave",
    //       [provider.getWorldAddress(), game_id],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing leave:", error);
    //     throw error;
    //   }
    // };

    // const kick = async ({ account, game_id, team_index }: Kick) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "kick",
    //       [provider.getWorldAddress(), game_id, team_index],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing kick:", error);
    //     throw error;
    //   }
    // };

    // const remove = async ({ account, game_id }: Remove) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "delete",
    //       [provider.getWorldAddress(), game_id],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing delete:", error);
    //     throw error;
    //   }
    // };

    // const start = async ({ account, game_id }: Start) => {
    //   try {
    //     return await provider.execute(
    //       account,
    //       contract_name,
    //       "start",
    //       [provider.getWorldAddress(), game_id],
    //       details,
    //     );
    //   } catch (error) {
    //     console.error("Error executing start:", error);
    //     throw error;
    //   }
    // };

    const move = async ({
      account,
      game_id,
      team_id,
      monster_id,
      x,
      y,
      special,
    }: Move) => {
      try {
        return await provider.execute(account, {
          contractName: contract_name,
          entrypoint: "move",
          calldata: [
            provider.getWorldAddress(),
            game_id,
            team_id,
            monster_id,
            x,
            y,
            special ? 1 : 0,
          ],
        });
      } catch (error) {
        console.error("Error executing move:", error);
        throw error;
      }
    };

    const surrender = async ({ account }: Surrender) => {
      try {
        return await provider.execute(account, {
          contractName: contract_name,
          entrypoint: "surrender",
          calldata: [provider.getWorldAddress()],
        });
      } catch (error) {
        console.error("Error executing surrender:", error);
        throw error;
      }
    };

    return {
      address: contract.address,
      spawn,
      create,
      // join,
      // ready,
      // transfer,
      // leave,
      // kick,
      // remove,
      // start,
      move,
      surrender,
    };
  }

  return {
    actions: actions(),
  };
}
